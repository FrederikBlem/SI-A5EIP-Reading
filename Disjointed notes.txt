Chapter 3
Messaging Systems

Messaging makes applications loosely coupled by communicating asynchronously, 
which also makes the communication more reliable 
because the two applications do not have to be running at the same time. 

Messaging Overview:
*	Channels - Message Channels is a virtual pipe that connects a sender to a receiver.
*	Messages - An atomic packet of data that can be transmitted on a channel.
		A sender application will try repeatedly to deliver the message until it succeeds. (Transactional?)
*	Pipes and Filters - this architecture describes how multiple processing steps (filters)
		can be chained together using channels. Useful fx. for receivers expecting different
		formats than that of the sender's.
*	Routing - A Message Router chooses what channels to send a message along for it to get
		to its intended target or at least the next router.
*	Transformation - A Message Translator (intermediate filter) converts the message from 
		one format to another.
*	Endpoints - coordinated Message Endpoints are like a bridge code that enables the 
		application to send and receive messages.
		
Extrapolated keywords of note:
*	Sender and receiver,
*	Atomic Packet (*Header* - info on data description & origin & destination etc., *Body*),
*	Message Types (Command Message for procedure invokation, Document Message for
		passing data, etc.)
*	Formats and translation (format specified is called Canonical Data Model (also see
		page 68 examples)),
*	Pipeline Processing or Parallel Processing (instead of Sequential Processing),
*	Architecture approaches,
*	Administration Tools (J2EE JMS, IBM Websphere MQ, Microsoft Message Queue Explorer),

Message channels are distinguished by the type of information they carry.

Message Endpoints can be directly connected to each other or go through a central hub.

The number and purpose of channels available tend to be fixed at deployment time because
other applications than the one creating the channels during runtime must know of them.
	Exceptions do exist.

Similar terms:
* Sender and Receiver
* Producer and Consumer 
* Publisher and Subscriber
* Requester and Provider

An application that sends or receives messages may be called a client of the messaging system; 
	a more specific term is endpoint or message endpoint.
	
Channel Name Example:
	MyCorp/Prod/OrderProcessing/NewOrders.

There are two different kinds of message channels: 
Point-to-Point Channels and Publish-Subscribe Channels (106). 
Mixing different data types on the same channel can cause a lot of confusion; 
	to avoid this, use separate Datatype Channels.
	
Applications that wish to use Messaging but do not have access to a messaging 
client can still connect to the messaging system using Channel Adapters.

A well-designed set of channels forms a Message Bus that acts like a messaging API
for a whole group of applications.

Message Channels are created by various Admin Tools and applications make instances of them.

Typically, a  Message Channel provides language, platform, and location independence between the filters.
This affords us the flexibility to move a processing step to a different machine for dependency, maintenance, 
or performance  reasons.

One of the potential downsides of a Pipes and Filters architecture is the larger number of required channels. 
First, channels may not be an unlimited resource, since channels provide buffering and other functions that 
consume memory and CPU cycles. Also, publishing a message to a channel involves a certain amount of overhead 
because the data has to be translated from the application-internal format into the messaging 
infrastructure's own format. At the receiving end, this process has to be reversed. 
If we are using a long chain of filters, we are paying for the gain in flexibility with potentially lower 
performance due to repeated message data conversion.